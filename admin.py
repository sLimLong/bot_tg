# admin.py

import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler, CallbackQueryHandler, ContextTypes
)
from config import SERVERS, ALLOWED_ADMINS

# üõ†Ô∏è /admin ‚Äî –∑–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ALLOWED_ADMINS:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    keyboard = [[InlineKeyboardButton(s["name"], callback_data=f"admin_{i}")] for i, s in enumerate(SERVERS)]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))

# ‚öôÔ∏è –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ ‚Üí –¥–µ–π—Å—Ç–≤–∏—è
async def handle_admin_server_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    index = int(query.data.replace("admin_", ""))
    server = SERVERS[index]
    context.user_data["selected_server"] = server["name"]
    context.user_data["selected_index"] = index

    keyboard = [
        [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data="action_restart")],
        [InlineKeyboardButton("‚õî –û—Ç–∫–ª—é—á–µ–Ω–∏–µ", callback_data="action_shutdown")],
        [InlineKeyboardButton("üìç –ö–∏–∫", callback_data="action_kick")],
        [InlineKeyboardButton("üìç –ë–∞–Ω", callback_data="action_ban")],
        [InlineKeyboardButton("üìç –ë–∞–Ω –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö", callback_data="action_banall")],
        [InlineKeyboardButton("üì£ Broadcast", callback_data="action_broadcast")],
        [InlineKeyboardButton("üë• –û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–∏", callback_data="action_players")],
        [InlineKeyboardButton("üîç –ò–≥—Ä–æ–∫ –ø–æ EntityID", callback_data="action_apl")],
        [InlineKeyboardButton("üìò –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞", callback_data="action_commands")]
    ]
    await query.edit_message_text(f"–°–µ—Ä–≤–µ—Ä: {server['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))

# üö® –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def handle_admin_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data.replace("action_", "")
    server_name = context.user_data.get("selected_server")
    index = context.user_data.get("selected_index", 0)
    server = SERVERS[index]

    if action == "restart":
        await query.edit_message_text(f"üîÅ {server_name} ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω (–∑–∞–≥–ª—É—à–∫–∞)")
    elif action == "shutdown":
        await query.edit_message_text(f"‚õî {server_name} ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ (–∑–∞–≥–ª—É—à–∫–∞)")
    elif action == "broadcast":
        await query.edit_message_text("üì£ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞:")
        context.user_data["broadcast_mode"] = True
    elif action == "players":
        try:
            response = requests.get(f"{server['url']}/api/getplayersonline", auth=server['auth'], timeout=5)
            players = response.json()
            if not isinstance(players, list) or not players:
                await context.bot.send_message(chat_id=update.effective_chat.id, text=f"üë• {server['name']} ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –æ–Ω–ª–∞–π–Ω")
            else:
                lines = [
                    f"‚Ä¢ {p.get('name','?')}\n `{p.get('steamid','‚Äî')}`\n ID: `{p.get('entityid','‚Äî')}`\n ----"
                    for p in players
                ]
                text = f"üë• {server['name']} ‚Äî –æ–Ω–ª–∞–π–Ω ({len(players)}):\n" + "\n".join(lines)
                await context.bot.send_message(chat_id=update.effective_chat.id, text=text, parse_mode="Markdown")
        except Exception as e:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚ùå –û—à–∏–±–∫–∞: {e}")
    elif action == "apl":
        await query.message.reply_text(
            "üîç –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/apl <EntityID>`",
            parse_mode="Markdown"
        )
    elif action == "kick":
        await query.message.reply_text(
            "üìç –ö–æ–º–∞–Ω–¥–∞ `/kick` –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥:\n\n"
            "1. –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞\n"
            "2. –í–≤–æ–¥ EntityID\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ `/kick` –≤ —á–∞—Ç.",
            parse_mode="Markdown"
        )
    elif action == "ban":
        await query.message.reply_text(
            "üìç –ö–æ–º–∞–Ω–¥–∞ `/ban` –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥:\n\n"
            "1. –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞\n"
            "2. –í–≤–æ–¥ SteamID64\n"
            "3. –ü—Ä–∏—á–∏–Ω–∞\n"
            "4. –°—Ä–æ–∫\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ `/ban` –≤ —á–∞—Ç.",
            parse_mode="Markdown"
        )
    elif action == "banall":
        await query.message.reply_text(
            "üìç –ö–æ–º–∞–Ω–¥–∞ `/banall` –∑–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥:\n\n"
            "1. –í–≤–æ–¥ SteamID64\n"
            "2. –ü—Ä–∏—á–∏–Ω–∞\n"
            "3. –°—Ä–æ–∫\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ `/banall` –≤ —á–∞—Ç.",
            parse_mode="Markdown"
        )
    elif action == "commands":
        await query.message.reply_text(
            "üìò –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n"
            "‚Ä¢ /kick ‚Äî –∫–∏–∫ –∏–≥—Ä–æ–∫–∞ (–ø–æ EntityID)\n"
            "‚Ä¢ /ban ‚Äî –±–∞–Ω –∏–≥—Ä–æ–∫–∞ (–ø–æ SteamID64)\n"
            "‚Ä¢ /banall ‚Äî –±–∞–Ω –∏–≥—Ä–æ–∫–∞ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö\n"
            "‚Ä¢ /apl <EntityID> ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ\n"
            "‚Ä¢ /admin ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
            "‚Ä¢ /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é",
            parse_mode="Markdown"
        )

# üì¶ –≠–∫—Å–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
admin_handlers = [
    CommandHandler("admin", admin_panel),
    CallbackQueryHandler(handle_admin_server_choice, pattern=r"^admin_"),
    CallbackQueryHandler(handle_admin_action, pattern=r"^action_")
]
