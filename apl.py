import requests
from telegram import Update
from telegram.ext import CommandHandler, ContextTypes
from config import SERVERS, ALLOWED_ADMINS

async def show_player_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in ALLOWED_ADMINS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /apl <EntityID>")
        return

    entity_id = context.args[0]
    server = SERVERS[0]  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤

    try:
        response = requests.get(
            f"{server['url']}/api/player",
            auth=server['auth'],
            timeout=5
        )

        if response.status_code != 200:
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤:\n–°—Ç–∞—Ç—É—Å: {response.status_code}\n–û—Ç–≤–µ—Ç: {response.text}"
            )
            return

        data = response.json()
        players = data.get("data", {}).get("players", [])
        player = next((p for p in players if str(p.get("entityId")) == str(entity_id)), None)

        if not player:
            await update.message.reply_text(
                f"üëª –ò–≥—Ä–æ–∫ —Å EntityID `{entity_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                parse_mode="Markdown"
            )
            return

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        name = player.get("name", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π")
        pos = player.get("position", {})
        pos_text = f"X: {pos.get('x', '?')}, Y: {pos.get('y', '?')}, Z: {pos.get('z', '?')}"
        hp = player.get("health", "?")
        level = player.get("level", "?")
        online = "üü¢ –û–Ω–ª–∞–π–Ω" if player.get("online") else "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω"
        ping = player.get("ping", "?")
        kills = player.get("kills", {}).get("zombies", 0)

        # –°—Ç–∞—Ç—É—Å –±–∞–Ω–∞
        ban_info = player.get("banned", {})
        ban_active = ban_info.get("banActive", False)
        ban_reason = ban_info.get("reason", "–Ω–µ —É–∫–∞–∑–∞–Ω–∞")
        ban_until = ban_info.get("until", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        ban_status = f"üö´ –ó–∞–±–∞–Ω–µ–Ω\n–ü—Ä–∏—á–∏–Ω–∞: {ban_reason}\n–î–æ: {ban_until}" if ban_active else "‚úÖ –ù–µ –∑–∞–±–∞–Ω–µ–Ω"

        # Steam-—Å—Å—ã–ª–∫–∞
        platform_data = player.get("platformId", {})
        steam_raw = platform_data.get("combinedString", "")
        steam_id = steam_raw.replace("Steam_", "") if steam_raw.startswith("Steam_") else None
        steam_link = f"[üîó Steam –ø—Ä–æ—Ñ–∏–ª—å](https://findsteamid.com/steamid/{steam_id})" if steam_id else "‚ùå Steam ID –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"*üßç –ò–≥—Ä–æ–∫:* {name}\n"
            f"*üÜî EntityID:* `{entity_id}`\n"
            f"*üì∂ –°—Ç–∞—Ç—É—Å:* {online} (Ping: {ping})\n"
            f"*üìà –£—Ä–æ–≤–µ–Ω—å:* {level}\n"
            f"*‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ:* {hp}\n"
            f"*üìç –ü–æ–∑–∏—Ü–∏—è:* {pos_text}\n"
            f"*‚ò†Ô∏è –£–±–∏–π—Å—Ç–≤–∞ –∑–æ–º–±–∏:* {kills}\n"
            f"*üö® –ë–∞–Ω:* {ban_status}\n"
            f"{steam_link}",
            parse_mode="Markdown"
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:\n{e}")

# üì¶ –≠–∫—Å–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–∞
apl_handlers = [
    CommandHandler("apl", show_player_by_id)
]
