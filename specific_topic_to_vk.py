import logging
import aiohttp
from telegram import Update
from telegram.ext import MessageHandler, filters, ContextTypes

# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
VK_TOKEN = "vk1.a.fWx8Je9RjMwNhr2Xx-1q8EAcHrGLGYNcNE9RY-KZ56rbDwHof-CybEruoUmpLM-yRNiZ_Rl3RE5gw6wm9bsE9eWF3EgVzzeZI9eDyldxYwQrocv6yNmavgm6tWM9SiroYR_po_GX1o1al3jsytIdn0tXsYEYbgblkNocEoFfZjQYJtfEE1D606pwBL0LiXgx4iQaJqbnp3-Lm35lcIhkoA"
VK_GROUP_ID = 148250057
TELEGRAM_GROUP_ID = -1002418675036
TARGET_THREAD_ID = 31  # ID –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–ø–∏–∫–∞

# üì§ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ VK
async def post_to_vk(text: str, message_id: int):
    if not text.strip():
        logging.warning("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º")
        return

    post_link = f"https://t.me/c/{str(TELEGRAM_GROUP_ID)[4:]}/{message_id}"
    full_text = f"{text}\n\nüîó –û—Ä–∏–≥–∏–Ω–∞–ª –≤ Telegram: {post_link}"

    params = {
        "access_token": VK_TOKEN,
        "owner_id": -VK_GROUP_ID,
        "message": full_text,
        "v": "5.131"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post("https://api.vk.com/method/wall.post", params=params) as response:
                status = response.status
                raw = await response.text()
                logging.debug(f"üì° VK HTTP status: {status}")
                logging.debug(f"üì° VK raw response: {raw}")

                result = await response.json()
                if "error" in result:
                    logging.error(f"‚ùå VK Error: {result['error']['error_msg']}")
                else:
                    logging.info("üì§ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ VK")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ VK: {e}")

# üì¨ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä Telegram
async def specific_topic_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    logging.info(f"üìå chat.id={message.chat.id}, thread_id={message.message_thread_id}, is_topic={message.is_topic_message}")

    if (
        message.chat.id == TELEGRAM_GROUP_ID and
        message.is_topic_message and
        message.message_thread_id == TARGET_THREAD_ID
    ):
        logging.info("üì° –£—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ VK")
        text = message.text or ""
        await post_to_vk(text, message.message_id)
    else:
        logging.info("‚õî –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—è–º ‚Äî –∏–≥–Ω–æ—Ä")

# üì¶ –≠–∫—Å–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è main.py
topic_handler = MessageHandler(filters.ChatType.SUPERGROUP & filters.TEXT, specific_topic_handler)
