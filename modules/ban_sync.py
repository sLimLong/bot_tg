import telnetlib
import re
import os
import json
import time
import logging
from config import SERVERSRCON
from datetime import datetime
from telegram import Update
from telegram.ext import CommandHandler, CallbackContext
import asyncio

SYNC_PATH = os.path.join("data", "ban_sync.json")

def fetch_banlist(server):
    try:
        tn = telnetlib.Telnet(server["host"], server["port"], timeout=5)
        tn.read_until(b"Please enter password:", timeout=3)
        tn.write(server["password"].encode("utf-8") + b"\n")
        tn.write(b"ban list\n")
        raw = tn.read_until(b">", timeout=5).decode("utf-8", errors="ignore")
        tn.write(b"exit\n")

        pattern = r"(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) - (\S+) \((.*?)\) - (.+)"
        matches = re.findall(pattern, raw)

        banlist = []
        for date, steamid, name, reason in matches:
            banlist.append({
                "date": date,
                "steamid": steamid,
                "name": name if name != "-unknown-" else "unknown",
                "reason": reason
            })
        logging.info(f"[ban_sync] {server['name']}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(banlist)} –±–∞–Ω–æ–≤")
        return banlist
    except Exception as e:
        logging.warning(f"[ban_sync] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–Ω–ª–∏—Å—Ç–∞ —Å {server['name']}: {e}")
        return []

def send_ban(server, entry):
    try:
        tn = telnetlib.Telnet(server["host"], server["port"], timeout=5)
        tn.read_until(b"Please enter password:", timeout=3)
        tn.write(server["password"].encode("utf-8") + b"\n")

        auth_response = tn.read_until(b">", timeout=5).decode("utf-8", errors="ignore")
        logging.info(f"[ban_sync] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ {server['name']}: {auth_response}")

        try:
            ban_until = datetime.strptime(entry["date"], "%Y-%m-%d %H:%M:%S")
            now = datetime.now()
            ban_days = max((ban_until - now).days, 1)
        except Exception:
            ban_days = 365

        # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –¥–æ 128 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –æ–Ω–∞ —Ü–µ–ª–∏–∫–æ–º –≤ –∫–∞–≤—ã—á–∫–∞—Ö
        reason = entry["reason"].strip()[:128].replace('"', '\\"')
        name = entry["name"].strip().split()[0].replace('"', '\\"')  # —Ç–æ–ª—å–∫–æ ID

        cmd = f'ban add {entry["steamid"]} {ban_days} days "{reason}" "{name}"'

        logging.info(f"[ban_sync] –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ {server['name']}: {cmd}")
        tn.write(cmd.encode("utf-8") + b"\n")

        time.sleep(1)
        response = tn.read_very_eager().decode("utf-8", errors="ignore")
        logging.info(f"[ban_sync] –û—Ç–≤–µ—Ç –æ—Ç {server['name']}: {response}")

        tn.write(b"exit\n")
    except Exception as e:
        logging.warning(f"[ban_sync] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ {server['name']}: {e}")

def sync_banlists():
    if len(SERVERSRCON) < 2:
        logging.warning("[ban_sync] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.")
        return

    all_banlists = {
        server["name"]: fetch_banlist(server)
        for server in SERVERSRCON
    }

    steamid_map = {}
    for server_name, bans in all_banlists.items():
        for entry in bans:
            steamid = entry["steamid"]
            if steamid not in steamid_map:
                steamid_map[steamid] = {"entry": entry, "servers": set()}
            steamid_map[steamid]["servers"].add(server_name)

    added_count = 0
    for steamid, data in steamid_map.items():
        for server in SERVERSRCON:
            name = server["name"]
            if name not in data["servers"]:
                send_ban(server, data["entry"])
                added_count += 1
                logging.info(f"[ban_sync] –ë–∞–Ω {steamid} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ {name}")

    with open(SYNC_PATH, "w", encoding="utf-8") as f:
        json.dump(all_banlists, f, indent=2, ensure_ascii=False)

    logging.info(f"[ban_sync] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –±–∞–Ω–æ–≤.")

async def sync_banlists_command(update: Update, context: CallbackContext):
    try:
        await update.message.reply_text("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é –±–∞–Ω–ª–∏—Å—Ç—ã –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏...")
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, sync_banlists)
        await update.message.reply_text("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"[ban_sync] –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.")

def register_sync_command(app):
    app.add_handler(CommandHandler("syncbanlist", sync_banlists_command))
