import time, requests, logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes
from config import SERVERS, last_request_time, REQUEST_INTERVAL

# üìã –ö–æ–º–∞–Ω–¥–∞ /menu ‚Äî –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(server["name"], callback_data=f"menu_{i}")]
        for i, server in enumerate(SERVERS)
    ]
    await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))

# üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
async def handle_server_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not query.data.startswith("menu_"):
        return

    try:
        index = int(query.data.replace("menu_", ""))
        server = SERVERS[index]
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    now = time.time()
    key = (server["name"], "menu")
    if now - last_request_time.get(key, 0) < REQUEST_INTERVAL:
        await query.edit_message_text(f"‚è≥ {server['name']} ‚Äî –∑–∞–ø—Ä–æ—Å –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª")
        return

    try:
        response = requests.get(f"{server['url']}/api/getstats", auth=server['auth'], timeout=5)
        data = response.json()

        g = data.get("gametime", {})
        day = g.get("days", 0)
        hour = g.get("hours", 0)
        minute = g.get("minutes", 0)

        left = 7 - (day % 7)
        bloodmoon = "üåï –°–µ–≥–æ–¥–Ω—è ‚Äî –ö—Ä–∞—Å–Ω–∞—è –Ω–æ—á—å!" if left == 0 else f"ü©∏ –î–æ –ö–ù –æ—Å—Ç–∞–ª–æ—Å—å {left} –¥–Ω–µ–π."

        msg = (
            f"üñ•Ô∏è {server['name']}\n"
            f"üìÖ –î–µ–Ω—å {day}, {hour:02d}:{minute:02d}\n"
            f"üë• –ò–≥—Ä–æ–∫–æ–≤: {data.get('players', '?')}\n"
            f"üòà –í—Ä–∞–≥–æ–≤: {data.get('hostiles', '?')}\n"
            f"üêæ –ñ–∏–≤–æ—Ç–Ω—ã—Ö: {data.get('animals', '?')}\n"
            f"{bloodmoon}"
        )

        last_request_time[key] = now
        await query.edit_message_text(msg)

    except Exception as e:
        logging.warning(f"[menu] –û—à–∏–±–∫–∞: {e}")
        await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# üì¶ –≠–∫—Å–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
status_handlers = [
    CommandHandler("menu", menu),
    CallbackQueryHandler(handle_server_choice, pattern=r"^menu_")
]

# üïí –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
def schedule_jobs(app):
    pass
