import time, requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler, ContextTypes
from config import SERVERS

QUESTS = [
    {
        "id": 1,
        "title": "–£–±–µ–π 10 –∑–æ–º–±–∏",
        "type": "kill",
        "target": 10,
        "reward": "üí∞ 100 –º–æ–Ω–µ—Ç",
        "item_reward": {"item": "coin", "count": 100}
    },
    {
        "id": 2,
        "title": "–ù–∞–π–¥–∏ 3 –±–∞–Ω–∫–∏ –∫–æ—Ñ–µ",
        "type": "collect",
        "item": "coffee",
        "target": 3,
        "reward": "‚òï 1 —Å—É–ø–µ—Ä-–∫–æ—Ñ–µ",
        "item_reward": {"item": "supercoffee", "count": 1}
    }
]

user_quests = {}  # user_id ‚Üí {"id": quest_id, "progress": int}
quest_cooldowns = {}  # (user_id, quest_id) ‚Üí timestamp
COOLDOWN_SECONDS = 72 * 3600

# üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def quest_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –∫–≤–µ—Å—Ç", callback_data="menu_select")]]
    user_id = update.effective_user.id
    if user_quests.get(user_id):
        buttons.append([InlineKeyboardButton("üìå –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="menu_progress")])
        buttons.append([InlineKeyboardButton("üèÜ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="menu_complete")])
    buttons.append([InlineKeyboardButton("üÜî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å EntityID", callback_data="menu_setid")])
    buttons.append([InlineKeyboardButton("üåê –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="menu_server")])
    await update.message.reply_text("üéÆ –ú–µ–Ω—é –∫–≤–µ—Å—Ç–æ–≤:", reply_markup=InlineKeyboardMarkup(buttons))

# üìã –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤
async def quest_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    now = time.time()
    keyboard = []
    for q in QUESTS:
        cooldown_key = (user_id, q["id"])
        last_completed = quest_cooldowns.get(cooldown_key, 0)
        active = user_quests.get(user_id, {}).get("id") == q["id"]
        status = "üü° –ê–∫—Ç–∏–≤–µ–Ω" if active else "üî¥ –ö—É–ª–¥–∞—É–Ω" if now - last_completed < COOLDOWN_SECONDS else "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω"
        button_text = f"{q['title']} ({status})"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"quest_{q['id']}")])
    await update.callback_query.edit_message_text("üìã –í–∞—à–∏ –∫–≤–µ—Å—Ç—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

# üìå –ü—Ä–æ–≥—Ä–µ—Å—Å
async def quest_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    quest_data = user_quests.get(user_id)
    if not quest_data:
        await update.callback_query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
        return
    quest = next((q for q in QUESTS if q["id"] == quest_data["id"]), None)
    await update.callback_query.edit_message_text(f"üìå –ó–∞–¥–∞–Ω–∏–µ: {quest['title']}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {quest_data['progress']}/{quest['target']}")

# üèÜ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def quest_complete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    quest_data = user_quests.get(user_id)
    if not quest_data:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
        return
    quest = next((q for q in QUESTS if q["id"] == quest_data["id"]), None)
    if quest_data["progress"] < quest["target"]:
        await update.message.reply_text(f"‚è≥ –ó–∞–¥–∞–Ω–∏–µ –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü—Ä–æ–≥—Ä–µ—Å—Å: {quest_data['progress']}/{quest['target']}")
        return

    app_data = context.application.user_data.setdefault(user_id, {})
    server_index = app_data.get("selected_index")
    entity_id = app_data.get("entity_id")

    if server_index is None or not isinstance(server_index, int) or server_index >= len(SERVERS):
        await update.message.reply_text("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    server = SERVERS[server_index]
    reward_text = quest.get("reward", "üéÅ –ù–∞–≥—Ä–∞–¥–∞")
    item_reward = quest.get("item_reward")

    if item_reward and entity_id:
        try:
            response = requests.post(
                f"{server['url']}/api/giveitem",
                auth=server['auth'],
                json={"entityid": entity_id, "item": item_reward["item"], "count": item_reward["count"]},
                timeout=5
            )
            if response.status_code == 200:
                await update.message.reply_text(
                    f"üèÜ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏: {reward_text}\nüì¶ –í—ã–¥–∞–Ω–æ: {item_reward['item']} x{item_reward['count']}"
                )
            else:
                await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ:\n{response.text}")
        except Exception as e:
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ:\n{e}")
    else:
        await update.message.reply_text(f"üèÜ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n–í—ã –ø–æ–ª—É—á–∏–ª–∏: {reward_text}")

    quest_cooldowns[(user_id, quest["id"])] = time.time()
    del user_quests[user_id]

# üÜî –£—Å—Ç–∞–Ω–æ–≤–∫–∞ EntityID
async def set_entity_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setid <EntityID>")
        return
    entity_id = context.args[0]
    user_id = update.effective_user.id
    context.application.user_data.setdefault(user_id, {})["entity_id"] = entity_id
    await update.message.reply_text(f"‚úÖ EntityID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{entity_id}`", parse_mode="Markdown")

# üåê –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
async def handle_server_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    index = int(query.data.replace("server_", ""))
    user_id = update.effective_user.id
    context.application.user_data.setdefault(user_id, {})["selected_index"] = index
    await query.edit_message_text(f"‚úÖ –°–µ—Ä–≤–µ—Ä –≤—ã–±—Ä–∞–Ω: {SERVERS[index]['name']}")

# üéØ –í—ã–±–æ—Ä –∫–≤–µ—Å—Ç–∞
async def handle_quest_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    quest_id = int(query.data.replace("quest_", ""))
    quest = next((q for q in QUESTS if q["id"] == quest_id), None)
    now = time.time()
    cooldown_key = (user_id, quest_id)
    last_completed = quest_cooldowns.get(cooldown_key, 0)
    if now - last_completed < COOLDOWN_SECONDS:
        remaining = int((COOLDOWN_SECONDS - (now - last_completed)) / 3600)
        await query.edit_message_text(f"‚è≥ –≠—Ç–æ—Ç –∫–≤–µ—Å—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ {remaining} —á.")
        return
    user_quests[user_id] = {"id": quest_id, "progress": 0}
    await query.edit_message_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {quest['title']}\n–ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{quest['target']}")

# üì≤ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é
async def handle_menu_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "menu_select":
        await quest_list(update, context)
    elif query.data == "menu_progress":
        await quest_progress(update, context)
    elif query.data == "menu_complete":
        await quest_complete(update, context)
    elif query.data == "menu_setid":
        await query.edit_message_text("üÜî –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/setid <EntityID>`", parse_mode="Markdown")
    elif query.data == "menu_server":
        keyboard = [
            [InlineKeyboardButton(s["name"], callback_data=f"server_{i}")]
            for i, s in enumerate(SERVERS)
        ]
        await query.edit_message_text("üåê –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

# üì¶ –≠–∫—Å–ø–æ—Ä—Ç —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
quest_handlers = [
    CommandHandler("questmenu", quest_main_menu),
    CommandHandler("setid", set_entity_id),
    CommandHandler("complete", quest_complete),
    CallbackQueryHandler(handle_menu_action, pattern=r"^menu_"),
    CallbackQueryHandler(handle_server_choice, pattern=r"^server_"),
    CallbackQueryHandler(handle_quest_choice, pattern=r"^quest_")
]