import time
import logging
import requests
from telegram import Bot
from telegram.ext import CallbackContext, JobQueue
from config import SERVERS  # —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å name, url, auth

# üß© –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ø–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
GROUPS = {
    "7DTD PVE 1": {"chat_id": -1002695272288, "thread_id": 6},
    "7DTD PVE 2": {"chat_id": -1002695272288, "thread_id": 4},
    "7DTD PVE 3": {"chat_id": -1002695272288, "thread_id": 8}
}

# ‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
BLOODMOON_INTERVAL = 3600  # 1 —á–∞—Å
last_bloodmoon_alert = {}

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ù –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö
async def check_bloodmoon(context: CallbackContext):
    bot: Bot = context.bot
    servers = context.job.data

    logging.info("[bloodmoon] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ö–ù...")

    for server in servers:
        name = server.get("name", "").strip()
        group = GROUPS.get(name)

        if not group:
            logging.warning(f"[bloodmoon] –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞: {name}")
            continue

        key = (name, "bloodmoon")
        now = time.time()

        # ‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if now - last_bloodmoon_alert.get(key, 0) < BLOODMOON_INTERVAL:
            logging.info(f"[bloodmoon] –ü—Ä–æ–ø—É—Å–∫ {name} ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –∏—Å—Ç—ë–∫")
            continue

        try:
            response = requests.get(f"{server['url']}/api/getstats", auth=server['auth'], timeout=5)
            data = response.json()
            day = data.get("gametime", {}).get("days")

            logging.info(f"[bloodmoon] –°–µ—Ä–≤–µ—Ä {name} ‚Äî –î–µ–Ω—å {day}")

            if not isinstance(day, int):
                logging.warning(f"[bloodmoon] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–Ω—è –Ω–∞ {name}: {day}")
                continue

            if day % 7 == 0:
                msg = f"üåï –°–µ–≥–æ–¥–Ω—è ‚Äî –ö—Ä–∞—Å–Ω–∞—è –Ω–æ—á—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {name}! –°–µ–π—á–∞—Å –î–µ–Ω—å {day}."
            elif day % 7 == 6:
                msg = f"ü©∏ –ó–∞–≤—Ç—Ä–∞ ‚Äî –ö—Ä–∞—Å–Ω–∞—è –Ω–æ—á—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {name}! –°–µ–π—á–∞—Å –î–µ–Ω—å {day}."
            else:
                logging.info(f"[bloodmoon] –ù–µ—Ç –ö–ù –Ω–∞ {name} ‚Äî –î–µ–Ω—å {day}")
                continue

            # üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–æ–ø–∏–∫
            await bot.send_message(
                chat_id=group["chat_id"],
                message_thread_id=group["thread_id"],
                text=msg
            )

            last_bloodmoon_alert[key] = now
            logging.info(f"[bloodmoon] –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {name}: {msg}")

        except Exception as e:
            logging.warning(f"[bloodmoon] –û—à–∏–±–∫–∞ –Ω–∞ {name}: {e}")

# üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
def schedule_bloodmoon_jobs(job_queue: JobQueue):
    logging.info("[bloodmoon] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    job_queue.run_repeating(
        callback=check_bloodmoon,
        interval=300,  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        first=5,
        data=SERVERS
    )
